@page "/stocks"

@using Client11.Services
@using Client11.Models
@inject IProductServices ProductServices
@inject ICategoryDataServices1 CategoryDataServices1
@inject IMultipleFileUploadServices MultipleFileUploadServices
@inject NavigationManager NavManager



<MudPaper Height="800px" Style="overflow:hidden; position:relative;">
    <MudDrawerContainer Class="mud-height-full">
        <MudDrawer Open=true Elevation="0" Variant="@DrawerVariant.Persistent" Style="background: #4b6cb7;  /* fallback for old browsers */
background: -webkit-linear-gradient(to right, #182848, #4b6cb7);  /* Chrome 10-25, Safari 5.1-6 */
background: linear-gradient(to right, #182848, #4b6cb7);
">
            <MudDrawerHeader>
                <MudText Typo="Typo.h6" Class="px-4 text-white ">PC NET</MudText>

            </MudDrawerHeader>
            <MudNavMenu Class="mud-width-full text-white " Style="margin: 0; padding: 0; height:100%;">
                <MudNavLink @onclick="@(() => NavigateToDashboard())" Icon="@Icons.Material.Filled.Dashboard" IconColor="Color.Info">Dashboard</MudNavLink>

                <MudNavGroup Title="Product Details" Icon="@Icons.Material.Filled.AppRegistration" Expanded="true">
                    <MudNavLink href="category1" Icon="@Icons.Material.Filled.Category">Category</MudNavLink>
                    <MudNavLink href="products" Icon="@Icons.Material.Filled.ProductionQuantityLimits">Products</MudNavLink>
                    <MudNavLink href="stocks" Icon="@Icons.Material.Filled.WebStories">Stocks</MudNavLink>
                    <MudNavLink href="orders" Icon="@Icons.Material.Filled.Sell">Orders</MudNavLink>

                </MudNavGroup>
                <MudNavGroup Title="Admin Setting" Icon="@Icons.Material.Filled.AdminPanelSettings" Expanded="true">
                    <MudNavLink href="adminRegistration" Icon="@Icons.Material.Filled.Dataset">Add Admin</MudNavLink>
                    <MudNavLink href="adminregistrationtable" Icon="@Icons.Material.Filled.TableChart">Admin Deateils</MudNavLink>
                    <MudNavLink href="weather" Icon="@Icons.Material.Filled.TableChart">User Deateils</MudNavLink>

                    <MudNavLink @onclick="@(()=>logOutUser())" Icon="@Icons.Material.Filled.Logout">LogOut</MudNavLink>
                </MudNavGroup>
            </MudNavMenu>
        </MudDrawer>
        <MudGrid>
            <MudItem xs="12" sm="12" md="12" lg="12" xl="12" Class="d-flex justify-content-center">
                <MudPaper Class="d-flex flex-column justify-content-center align-items-center mud-width-full py-3"
                          Style="background: #00416A;  /* fallback for old browsers */
                             background: -webkit-linear-gradient(to top, #E4E5E6, #00416A);  /* Chrome 10-25, Safari 5.1-6 */
                             background: linear-gradient(to top, #E4E5E6, #00416A);">
                    <h3 class="text-center">Welcome to Pc NET Computers</h3>
                </MudPaper>
            </MudItem>

            <!-- Divide Screen into Two Parts -->

             <div style="height: 700px; overflow: auto;">
                <MudGrid Style="margin-left: 10px; margin-top: 10px">
                    <!-- First Part -->
                    <MudItem xs="12" sm="6" md="9" lg="30" xl="30">

                        <div class="card">
                            <h4 class="card-header">Stocks</h4>
                        </div>

                        @if (showEditPopup == true)
                        {
                            <div class="modal">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5>Edit Categoty</h5>
                                        <span class="close" @onclick="ToggleEditPopup"> &times; </span>
                                    </div>
                                    <div class="modal-body">
                                        <EditForm Model="@stockToUpdate" OnInvalidSubmit="UpdateStock">
                                            <div class="form-row">
                                                <div class="form-group col-5">
                                                    <label>Name : </label>
                                                    <InputText @bind-Value="stockToUpdate.Stock" class="form-control" />
                                                </div>
                                            </div>
                                        </EditForm>

                                    </div>
                                    <div class="modal-footer">
                                        <input type="button" class="btn btn-primary" value="Update" @onclick="UpdateStock" />
                                        <input type="button" class="btn btn-primary" value="cancel" @onclick="ToggleEditPopup" />

                                    </div>
                                </div>
                            </div>

                        }
                        @if (Users == null)
                        {
                            <p><em>Loading...</em></p>
                        }
                        else
                        {

                            <div class=" table-responsive card-body bg-dark">
                                <table class="table table-striped table-bordered bg-light">
                                    <thead>
                                        <tr>
                                            <th>Product ID</th>
                                            <th>Product Name</th>
                                            <th>Price</th>
                                            <th>Stock</th>
                                            <th>Category</th>



                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var user in Users)
                                        {
                                            <tr>
                                                <td>@user.UserID</td>
                                                <td>@user.ProductName</td>
                                                <td>@user.Price</td>
                                                <td>@user.Stock</td>
                                                <td>@user.Category111</td>





                                                @* <td>
                                        <button type="submit" @onclick="@(()=> EditUser(user.UserID))" class="btn btn-primary">Edit</button>
                                        </td> *@

                                                <td>
                                                    <button type="submit" @onclick="@(()=>DeleteUser(user))" class="btn btn-danger">Delete</button>
                                                </td>




                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>

                        }


                    </MudItem>
                </MudGrid>


            </div>



        </MudGrid>

    </MudDrawerContainer>
</MudPaper>





@code {
    [Parameter]
    public int adminID { get; set; }
    public ProductServicesModel stockToUpdate { get; set; }

    public bool showEditPopup = false;
    public string Message = string.Empty;

    private void ToggleEditPopup()
    {
        showEditPopup = showEditPopup == true ? false : true;
    }
    
    private async Task UpdateStock()
    {

    }
    private void EditUser(int UserId)
    {
        NavManager.NavigateTo($"/products_User/{UserID}");
    }




    private CategoryModel1 selectedCategory;
    private string category111;

    private void CategoryClicked(ChangeEventArgs e)
    {

        int selectedCategoryId;
        if (int.TryParse(e.Value.ToString(), out selectedCategoryId))
        {
            selectedCategory = categoryList.FirstOrDefault(cat => cat.UserID == selectedCategoryId);
            category111 = selectedCategory?.FirstName;
            // Additional logic if needed
        }
        else
        {
            selectedCategory = null; // Ensure setting to null for non-integer values
            category111 = null;
            // Handle parsing error if necessary
        }


    }


    public List<CategoryModel1> categoryList { get; set; }
    [Parameter]
    public int UserID { get; set; }

    private string productName;
    private string price;
    private string stock;

    private string category1;
    private string imageFiles;
    private int fielId;

    protected async override Task OnInitializedAsync()
    {
        Users = await ProductServices.GetAllUser();

        await GetCategories();
        await LoadSavedImages();

        if (UserID > 0)
        {
            var response = await ProductServices.GetUserByID(UserID);

            if (response != null)
            {
                productName = response.ProductName;
                price = response.Price;
                stock = response.Stock;

            }
        }
    }
    private async Task GetCategories()
    {
        categoryList = await CategoryDataServices1.GetAllUser();
    }


    private async void AddUserRecord()

    {

        var productServicesModel = new Models.ProductServicesModel
            {
                ProductName = productName,
                Price = price,
                Stock = stock,
                Category111 = category111,

                UserID = UserID,

            };


        SaveImageFile();

        int response = -1;
        if (UserID > 0)
        {
            response = await ProductServices.UpdateUser(productServicesModel);

        }
        else
        {
            response = await ProductServices.AddUser(productServicesModel);
            //add record
        }


        if (response > 0)
        {
            // Users = await ProductServices.GetAllUser();
            productName = price = stock = category111 = string.Empty;

            this.StateHasChanged();
            await App.Current.MainPage.DisplayAlert("Record Saved",
            "Record Saved To Product Table ", "OK");

        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops",
           "Something went wrong while adding record", "OK");
        }


    }

    private List<ProductServicesModel> Users;


    private async void DeleteUser(ProductServicesModel user)
    {
        var response = await ProductServices.DeleteUser(user);
        if (response > 0)
        {
            Users.Remove(user);
            this.StateHasChanged();
        }
    }
    

    MudMessageBox mbox { get; set; }
    private void OnButtonClicked(ProductServicesModel user)
    {
        mbox.Show();

        //DeleteUser(user);
        StateHasChanged();
    }


    [Parameter]
    public int imageID { get; set; }
    private List<IBrowserFile> uploadedFiles = new List<IBrowserFile>();
    private List<MultipleFileUploadModel> savedImages = new List<MultipleFileUploadModel>();

    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        uploadedFiles = e.GetMultipleFiles().ToList();
        foreach (var file in uploadedFiles)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var imageData = memoryStream.ToArray();
                    Console.WriteLine($"File Name: {file.Name}, File Size: {imageData.Length} bytes");
                }
            }
        }
        StateHasChanged(); // Ensure to trigger a re-render after updating the data
    }

    private async Task LoadSavedImages()
    {
        savedImages = await MultipleFileUploadServices.GetAllImages();
        StateHasChanged();
    }

    private async void SaveImageFile()
    {
        foreach (var file in uploadedFiles)
        {
            using (var stream = file.OpenReadStream())
            {
                using (var memoryStream = new MemoryStream())
                {
                    await stream.CopyToAsync(memoryStream);
                    var imageData = memoryStream.ToArray();

                    // Save to database using the service
                    var image = new MultipleFileUploadModel
                        {
                            FielId = Guid.NewGuid().ToString(), // Generate a unique ID
                            FileName = file.Name,
                            ImageData = imageData
                        };

                    await MultipleFileUploadServices.AddImage(image);
                }
            }
        }


        await LoadSavedImages();
    }

    private async void DeleteImage(int index)
    {
        if (index >= 0 && index < savedImages.Count)
        {
            var imageToDelete = savedImages[index];
            await MultipleFileUploadServices.DeleteImage(imageToDelete.FielId);
            await LoadSavedImages();
        }
        else
        {
            Console.WriteLine("Invalid index");
        }
    }
    private void logOutUser()
    {
        NavManager.NavigateTo("/");

    }
    private void NavigateToDashboard()
    {
        NavManager.NavigateTo($"/profile11/{adminID}");
    }
}
