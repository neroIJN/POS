@page "/adminRegistration1"

@using Client11.Services
@using Client11.Models
@inject IAdminRegistrationService AdminRegistrationService
@inject NavigationManager NavManager



<div style="text-align: center; padding-top: 20px;">
    <h3> Admin Registration</h3>
</div>



<EditForm Model="@adminRegistrationModel" OnValidSubmit="Submit" style="padding: 50px 30px;">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label>First Name</label>
        <input class="form-control" @bind="firstName" placeholder="Enter First Name">
        <ValidationMessage For="@(()=> adminRegistrationModel.FirstName)" />
    </div>

    <div class="form-group">
        <label>Last Name</label>
        <input class="form-control" @bind="lastName" placeholder="Enter Last Name">
        <ValidationMessage For="@(()=> adminRegistrationModel.LastName)" />

    </div>

    <div class="mt-2 form-group">
        <label>Gender</label>
        <div class="d-flex flex-row">
            <div class="d-flex gap-2">
                <div class="form-check">
                    <input checked="@(gender=="Male")" @onchange="@(()=> setGender("Male"))" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault1">
                        Male
                    </label>
                    <ValidationMessage For="@(()=> adminRegistrationModel.Gender)" />
                </div>
                <div class="form-check">
                    <input checked="@(gender=="Female")" @onchange="@(()=> setGender("Female"))" class="form-check-input" type="radio" name="flexRadioDefault">
                    <label class="form-check-label" for="flexRadioDefault2">
                        Female
                    </label>

                </div>

            </div>
        </div>

    </div>
    <div class="form-group">
        <label>Email address</label>
        <input type="email" @bind="email" class="form-control" placeholder="Enter Email">
        <ValidationMessage For="@(()=> adminRegistrationModel.Email)" />
    </div>
    <div class="mt-2 form-group">
        <label>Password</label>
        <input type="password" @bind="password" class="form-control" placeholder="Password">
        <ValidationMessage For="@(()=> adminRegistrationModel.Password)" />
    </div>

    <div class="mt-2 text-end">
        <NavLink class="nav-link" href="/login">
            <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Alredy have an Account
        </NavLink>
    </div>

    <div class="text-center mt-2">
        <button class="btn btn-primary" @onclick="AddAdminRecode" type="submit">Register</button>

    </div>


</EditForm>
@code {
    [Parameter]
    public int AdminID { get; set; }

    private string firstName;
    private string lastName;
    private string email;
    private string gender;
    private string password;

    private void setGender(string gender)
    {
        this.gender = gender;
    }

    protected async override Task OnInitializedAsync()
    {
        if (AdminID > 0)
        {
            var response = await AdminRegistrationService.GetAdminByID(AdminID);
            if (response != null)
            {
                firstName = response.FirstName;
                lastName = response.LastName;
                email = response.Email;
                gender = response.Gender;
                password = response.Password;
            }
        }
    }


    AdminRegistrationModel adminRegistrationModel = new();
    private void Submit()
    {

    }

    private async void AddAdminRecode()
    {

        var adminRegistrationModel = new Models.AdminRegistrationModel
            {
                FirstName = firstName,
                LastName = lastName,
                Email = email,
                Gender = gender,
                Password = password,
                AdminID = AdminID
            };

        int response = -1;

        if (AdminID > 0)
        {
            response = await AdminRegistrationService.UpdateAdmin(adminRegistrationModel);

        }
        else
        {
            response = await AdminRegistrationService.AddAdmin(adminRegistrationModel);

        }

        if (response > 0)
        {
            firstName = lastName = gender = email = password = string.Empty;

            await App.Current.MainPage.DisplayAlert("Record Saved",
            "Record Saved To Registration Table", "OK");
            NavManager.NavigateTo($"/login");
        }
        else
        {
            await App.Current.MainPage.DisplayAlert("Oops",
           "Something went wrong while adding record", "OK");
        }


    }
    private void logOutUser(int AdminID)
    {
        NavManager.NavigateTo("/");

    }

}
